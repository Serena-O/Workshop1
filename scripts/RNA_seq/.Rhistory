knitr::opts_chunk$set(echo = TRUE)
if(!"knitr" %in% installed.packages()){
install.packages("knitr")
}
library(knitr)
knitr:::input_dir()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
BiocManager::install("ggplot2")
BiocManager::install("tidyr")
BiocManager::install("dplyr")
BiocManager::install("stringr")
BiocManager::install("ggfortify")
#load required libraries
library(DESeq2)
library(DESeq2)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
BiocManager::install("ggplot2")
BiocManager::install("tidyr")
BiocManager::install("dplyr")
BiocManager::install("stringr")
BiocManager::install("ggfortify")
#load required libraries
library(DESeq2)
BiocManager::install("DESeq2")
#load required libraries
library(DESeq2)
library(ggplot2)
library(ggfortify)
library(tidyr)
library(dplyr)
library(stringr)
#load raw count data and create some overview plots.
data = read.csv(file = 'GSE135448_geneCounts.csv', row.names = 1, header = TRUE)
#Some raw count data visualisation with boxplot and PCA
boxplot(log(data))
PCA <- prcomp(t(data))
autoplot(PCA, label = TRUE, label.size = 3)
#Load the metadata file.
metadata <- read.table(file = 'SraRunTable_Diet.txt', sep = ",", header = TRUE)
#Extract the dietary intervention groups from the metadata
groups <- factor(metadata$diet_intervention)
# Create a dataframe that includes the PCA results and group information
pca_df <- as.data.frame(PCA$x)
pca_df$Group <- groups
# Plot PCA with group information
autoplot(PCA, dta=pca_df, colour='Group', label=T, label.size=3)
# Plot PCA with group information
autoplot(PCA, data=pca_df, colour='Group', label=T, label.size=3)
#Create the "dds" object from count data and metadata. The experimental design compares via diagnosis (COS vs control). This is a design if you have only one variable to compare experimental groups.
dds <- DESeqDataSetFromMatrix(countData = data,
colData = metadata,
design = ~ diet_intervention, tidy = FALSE)
#Pre-filtering - technically not required, but will reduce memory size and increase speed if we remove samples with too low read counts.
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
#Pre-filtering - technically not required, but will reduce memory size and increase speed if we remove samples with too low read counts.
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
#run the DESeq2 function. This will take a while (up to 10 min are normal).
dds <- DESeq(dds)
#result output
resultsNames(dds)
DEG <- results(dds)
View(DEG)
#export the complete result file to CSV for later analysis
write.csv(DEG, file = "DEG_LPvsHP.csv")
#all significantly changed genes, all significantly upregulated genes, all significantly downregulated genes
SigDEG <- DEG[DEG$pvalue < 0.05,]
write.csv(SigDEG, file = "SigDEG_LPvsHP.csv")
SigUP <- DEG[DEG$pvalue < 0.05 & DEG$log2FoldChange > 1,]
write.csv(SigUP, file = "SigUP_LPvsHP.csv")
SigDOWN <- DEG[DEG$pvalue < 0.05 & DEG$log2FoldChange < -1,]
write.csv(SigDOWN, file = "SigDOWN_LPvsHP.csv")
View(SigDEG)
#Visualisation and interpretation of the results and the process
#sort by log2FC
DEG <- DEG[order(DEG$log2FoldChange),]
head(DEG)
head(SigDEG)
head(SigDEG[order(SigDEG$log2FoldChange), ])
#Volcano plot
par(mfrow=c(1,1))
# Make a basic volcano plot
with(DEG, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-6,6)))
# Add colored points: blue if log2FC < -1 and padj<0.05 and red if log2FC > 1 and padj<0.05)
with(subset(DEG, padj<0.05 & log2FoldChange < -1), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(DEG, padj<0.05 & log2FoldChange > 1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#export the complete result file to CSV for later analysis
write.csv(DEG, file = "DEG_LPvsHP.csv")
#all significantly changed genes, all significantly upregulated genes, all significantly downregulated genes
SigDEG <- DEG[DEG$pvalue < 0.05,]
write.csv(SigDEG, file = "SigDEG_LPvsHP.csv")
SigUP <- DEG[DEG$pvalue < 0.05 & DEG$log2FoldChange > 0.26,]
write.csv(SigUP, file = "SigUP_LPvsHP.csv")
SigDOWN <- DEG[DEG$pvalue < 0.05 & DEG$log2FoldChange < -0.26,]
write.csv(SigDOWN, file = "SigDOWN_LPvsHP.csv")
# a 20% decrease or increase will be a log2 fold change of 0.26 or -0.26
#log_2 of 1.2 = 0.263
#Visualisation and interpretation of the results and the process
#sort by log2FC
DEG <- DEG[order(DEG$log2FoldChange),]
head(DEG)
#Volcano plot
par(mfrow=c(1,1))
# Make a basic volcano plot
with(DEG, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-6,6)))
# Add colored points: blue if log2FC < -1 and padj<0.05 and red if log2FC > 1 and padj<0.05)
with(subset(DEG, padj<0.05 & log2FoldChange < -1), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(DEG, padj<0.05 & log2FoldChange > 1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#export the complete result file to CSV for later analysis
write.csv(DEG, file = "DEG_LPvsHP.csv")
#all significantly changed genes, all significantly upregulated genes, all significantly downregulated genes
SigDEG <- DEG[DEG$padj < 0.05,]
#export the complete result file to CSV for later analysis
write.csv(DEG, file = "DEG_LPvsHP.csv")
#all significantly changed genes, all significantly upregulated genes, all significantly downregulated genes
SigDEG <- DEG[DEG$pvalue < 0.05,]
write.csv(SigDEG, file = "SigDEG_LPvsHP.csv")
SigUP <- DEG[DEG$pvalue < 0.05 & DEG$log2FoldChange > 0.26,]
write.csv(SigUP, file = "SigUP_LPvsHP.csv")
SigDOWN <- DEG[DEG$pvalue < 0.05 & DEG$log2FoldChange < -0.26,]
write.csv(SigDOWN, file = "SigDOWN_LPvsHP.csv")
# a 20% decrease or increase will be a log2 fold change of 0.26 or -0.26
#log_2 of 1.2 = 0.263
#Volcano plot
par(mfrow=c(1,1))
# Make a basic volcano plot
with(DEG, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-6,6)))
# Add colored points: blue if log2FC < -1 and padj<0.05 and red if log2FC > 1 and padj<0.05)
with(subset(DEG, padj<0.05 & log2FoldChange < -0.26), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(DEG, padj<0.05 & log2FoldChange > 0.26), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#compare normalised counts vs. raw counts
dds_n <- estimateSizeFactors(dds);
dds_n <- counts(dds_n, normalized=TRUE)
boxplot(log(dds_n))
PCA <- prcomp(t(dds_n))
autoplot(PCA, label = TRUE, label.size = 3)
PCA <- prcomp(t(data))
autoplot(PCA, label = TRUE, label.size = 3)
PCA <- prcomp(t(dds_n))
pca_df <- as.data.frame(PCA$x)
pca_df$Group <- groups
autoplot(PCA, data=pca_df, colour='Group', label=T, label.size=3)
resultsNames(dds_n)
dds_n <- DESeq(dds_n)
DEG <- results(dds_n)
class(dds_n)
dds_n <- DESeq(dds_n$matrix)
dds_n <- DESeq(dds_n@matrix)
dds_n <- DESeq(dds_n)
if(!"knitr" %in% installed.packages()){
install.packages("knitr")
}
library(knitr)
knitr:::input_dir()
rm(list=ls())
# general config
baseDir <- 'datasets/'
bgxfile <- 'Annot/HumanHT-12_V4_0_R2_15002873_B.bgx'
setwd(baseDir)
BiocManager::install("limma")
BiocManager::install("illuminaio")
BiocManager::install("tidyverse")
BiocManager::install("PCAtools")
BiocManager::install("ggplot2")
BiocManager::install("Biobase")
install.packages("RColorBrewer")
library(limma)
library(RColorBrewer)
library(illuminaio)
library(tidyverse)
library(PCAtools)
library(ggplot2)
library(Biobase)
# read in the data and convert the data to an EListRaw object, which is a data object for single channel data
x <- read.table(paste0(baseDir, 'GSE176043_non-normalized.txt'),
header = TRUE, sep = '\t', stringsAsFactors = FALSE)
newnames <- colnames(read.table(paste0(baseDir, 'GSE176043_non-normalized.txt'),
header = TRUE, sep = '\t', stringsAsFactors = FALSE))
detectionpvalues <- x[,grep('Detection.Pval', colnames(x))]
x <- x[,-grep('Detection.Pval', colnames(x))]
probes <- x$ID.Ref
x <- data.matrix(x[,2:ncol(x)])
rownames(x) <- probes
#plot the expression data (before normalisation)
png("before norm.png", width = 1000, height = 500)
box_plot_data<-as.data.frame(log2(x))
par(mar=c(5,6,4,1)+.1)
boxplot(box_plot_data, main="Before background correction and normalisation",
xlab="Samples",ylab=expression('log'[2]*'(expression)'),cex=0.5, par(cex.lab=1.5),par(cex.axis=1.5))
dev.off()
# read in annotation Illumina Annotation file
annot <- illuminaio::readBGX('Annot/HumanHT-12_V4_0_R2_15002873_B.bgx')$probes
annot <- annot[,which(colnames(annot) %in% c('Source','Symbol','Transcript','ILMN_Gene','RefSeq_ID',
'Entrez_Gene_ID','Symbol','Protein_Product','Probe_Id','Probe_Type',
'Probe_Start','Chromosome','Probe_Chr_Orientation','Probe_Coordinates',
'Cytoband', 'Definition', 'Ontology_Component', 'Ontology_Process',
'Ontology_Function', 'Synonyms'))]
annot <- annot[which(annot$Probe_Id %in% rownames(x)),]
annot <- annot[match(rownames(x), annot$Probe_Id),]
View(annot)
# read in target file, this file contains the information about the timepoint and diet group
targets <- read.csv('datasets/targets.csv')
# create a custom EListRaw object
project <- new('EListRaw')
project@.Data[[1]] <- 'illumina'
project@.Data[[2]] <- NULL
project@.Data[[3]] <- annot
project@.Data[[3]] <- NULL
project@.Data[[4]] <- x
project@.Data[[5]] <- NULL
project$E <- x
project$targets <- NULL
project$genes <- annot
project$genes <- NULL
project$other$Detection <- detectionpvalues
View(detectionpvalues)
??neqc
project.bgcorrect.norm <- neqc(project, offset = 16)
View(project.bgcorrect.norm)
# filter out control probes, those with no symbol, and those that failed
annot <- annot[which(annot$Probe_Id %in% rownames(project.bgcorrect.norm)),]
project.bgcorrect.norm <- project.bgcorrect.norm[which(rownames(project.bgcorrect.norm) %in% annot$Probe_Id),]
annot <- annot[match(rownames(project.bgcorrect.norm), annot$Probe_Id),]
project.bgcorrect.norm@.Data[[3]] <- annot
project.bgcorrect.norm$genes <- annot
Control <- project.bgcorrect.norm$genes$Source=="ILMN_Controls"
NoSymbol <- project.bgcorrect.norm$genes$Symbol == ""
isexpr <- rowSums(project.bgcorrect.norm$other$Detection <= 0.01) >= 5
project.bgcorrect.norm.filt <- project.bgcorrect.norm[!Control & !NoSymbol & isexpr, ]
dim(project.bgcorrect.norm)
dim(project.bgcorrect.norm.filt)
# remove annotation columns we no longer need
project.bgcorrect.norm.filt$genes <- project.bgcorrect.norm.filt$genes[,c(
'Probe_Id', 'Entrez_Gene_ID',
'Definition','Ontology_Component','Ontology_Process','Ontology_Function',
'Chromosome','Probe_Coordinates','Cytoband','Probe_Chr_Orientation',
'RefSeq_ID','Entrez_Gene_ID','Symbol')]
head(project.bgcorrect.norm.filt$genes)
# summarise across genes by mean
# ID is used to identify the replicates
project.bgcorrect.norm.filt.mean <- avereps(project.bgcorrect.norm.filt,
ID = project.bgcorrect.norm.filt$genes$Entrez_Gene_ID)
dim(project.bgcorrect.norm.filt.mean)
expression_data<-as.data.frame(project.bgcorrect.norm.filt.mean[["E"]])
#plot the expression data (before normalisation)
png("after norm.png", width = 1000, height = 500)
par(mar=c(5,6,4,1)+.1)
boxplot(expression_data, main="After background correction and normalisation",
xlab="Samples",ylab=expression('log'[2]*'(expression)'),cex=0.5, par(cex.lab=1.5),par(cex.axis=1.5))
dev.off()
#plot the expression data (after normalisation)
png("after norm.png", width = 1000, height = 500)
par(mar=c(5,6,4,1)+.1)
boxplot(expression_data, main="After background correction and normalisation",
xlab="Samples",ylab=expression('log'[2]*'(expression)'),cex=0.5, par(cex.lab=1.5),par(cex.axis=1.5))
dev.off()
#calculate no of samples below p values of 0.01
boolean_values<-detection_probe<0.01
detection_probe <- as.data.frame(project.bgcorrect.norm.filt.mean[['other']][['Detection']])
#calculate no of samples below p values of 0.01
boolean_values<-detection_probe<0.01
count_true = data.frame(matrix(NA, nrow = nrow(detection_probe), ncol = 1))
count_false = data.frame(matrix(NA, nrow =nrow(detection_probe), ncol = 1))
percent_true = data.frame(matrix(NA, nrow = nrow(detection_probe), ncol = 1))
for (row in 1:nrow(detection_probe)){
count_true[row,1]<-length(boolean_values[row,][boolean_values[row,]==TRUE])
count_false[row,1]<-length(boolean_values[row,][boolean_values[row,]==FALSE])
percent_true[row,1]<-count_true[row,1]*100/54
}
#ouput the normalized data
write.table(expression_data, "normalised-data.txt", na ="", row.names=TRUE,  sep='\t', quote=FALSE)
# input normalized data, generate an ExpressionSet object for illumina analysis (based on the normalized data), extract sample name
trans_data <- read.table("normalised-data.txt", header = TRUE, sep = '\t', stringsAsFactors = FALSE)
trans_matrix <- as.matrix(trans_data)
eset <- ExpressionSet(trans_matrix, annotation=rownames(trans_data))
samples_name <- data.frame(sampleID = colnames(trans_data), stringsAsFactors = FALSE)
#extract categories for design matrix
Timepoint_diet <- paste(targets$Timepoint, targets$Diet, sep=".")
Timepoint_diet<- factor(Timepoint_diet, levels=c("baseline.Ex_diet", "end.Ex_diet", "baseline.C_diet", "end.C_diet"))
#Make design matrix and fit model
design <- model.matrix(~0+Timepoint_diet)
colnames(design)<-levels(Timepoint_diet)
fit <- lmFit(eset, design)
#Make contrast matrix
cont.matrix <- makeContrasts(
ExDiet_end_vs_baseline=end.Ex_diet-baseline.Ex_diet,
CDiet_end_vs_baseline=end.C_diet-baseline.C_diet,
levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
TopTable_Ex_diet <- topTable(fit2, adjust.method="BH", coef="ExDiet_end_vs_baseline", number=Inf)
TopTable_C_diet <- topTable(fit2, adjust.method="BH", coef="CDiet_end_vs_baseline", number=Inf)
#Make design matrix and fit model
design <- model.matrix(~0+Timepoint_diet)
colnames(design)<-levels(Timepoint_diet)
fit <- lmFit(eset, design)
#Make design matrix and fit model
design <- model.matrix(~0+Timepoint_diet)
colnames(design)<-levels(Timepoint_diet)
fit <- lmFit(eset, design)
#Make contrast matrix to compare end vs baseline experimental and control diet; this is how we tell the program what we want to compare against each other
cont.matrix <- makeContrasts(
ExDiet_end_vs_baseline=end.Ex_diet-baseline.Ex_diet,
CDiet_end_vs_baseline=end.C_diet-baseline.C_diet,
levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
TopTable_Ex_diet <- topTable(fit2, adjust.method="BH", coef="ExDiet_end_vs_baseline", number=Inf)
TopTable_C_diet <- topTable(fit2, adjust.method="BH", coef="CDiet_end_vs_baseline", number=Inf)
# Add the Entrez Gene IDs as a column to the TopTables
TopTable_Ex_diet <- rownames_to_column(TopTable_Ex_diet, "Entrez_ID" )
TopTable_C_diet <- rownames_to_column(TopTable_C_diet, "Entrez_ID")
subset_annot <- subset(annot, select = c(Entrez_Gene_ID, Symbol))
subset_annot <- unique(subset_annot)
TopTable_Ex_diet <- merge(TopTable_Ex_diet, subset_annot, by.x="Entrez_ID", by.y="Entrez_Gene_ID")
TopTable_C_diet <- merge(TopTable_C_diet, subset_annot, by.x="Entrez_ID", by.y="Entrez_Gene_ID")
View(TopTable_C_diet)
#Make contrast matrix to compare end vs baseline experimental and control diet; this is how we tell the program what we want to compare against each other
cont.matrix <- makeContrasts(
ExDiet_end_vs_baseline=end.Ex_diet-baseline.Ex_diet,
CDiet_end_vs_baseline=end.C_diet-baseline.C_diet,
levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
TopTable_Ex_diet <- topTable(fit2, adjust.method="BH", coef="ExDiet_end_vs_baseline", number=Inf)
TopTable_C_diet <- topTable(fit2, adjust.method="BH", coef="CDiet_end_vs_baseline", number=Inf)
TopTable_C_diet <- rownames_to_column(TopTable_C_diet, "Entrez_ID")
TopTable_C_diet <- topTable(fit2, adjust.method="BH", coef="CDiet_end_vs_baseline", number=Inf)
TopTable_C_diet <- rownames_to_column(TopTable_C_diet, "Entrez_ID")
#Make contrast matrix to compare end vs baseline experimental and control diet; this is how we tell the program what we want to compare against each other
cont.matrix <- makeContrasts(
ExDiet_end_vs_baseline=end.Ex_diet-baseline.Ex_diet,
CDiet_end_vs_baseline=end.C_diet-baseline.C_diet,
levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
TopTable_Ex_diet <- topTable(fit2, adjust.method="BH", coef="ExDiet_end_vs_baseline", number=Inf)
TopTable_C_diet <- topTable(fit2, adjust.method="BH", coef="CDiet_end_vs_baseline", number=Inf)
TopTable_C_diet <- rownames_to_column(TopTable_C_diet, "Entrez_ID")
TopTable_C_diet <- merge(TopTable_C_diet, subset_annot, by.x="Entrez_ID", by.y="Entrez_Gene_ID")
View(subset_annot)
#Make contrast matrix to compare end vs baseline experimental and control diet; this is how we tell the program what we want to compare against each other
cont.matrix <- makeContrasts(
ExDiet_end_vs_baseline=end.Ex_diet-baseline.Ex_diet,
CDiet_end_vs_baseline=end.C_diet-baseline.C_diet,
levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
TopTable_Ex_diet <- topTable(fit2, adjust.method="BH", coef="ExDiet_end_vs_baseline", number=Inf)
TopTable_C_diet <- topTable(fit2, adjust.method="BH", coef="CDiet_end_vs_baseline", number=Inf)
# Add the Entrez Gene IDs as a column to the TopTables
# rownames_to_column turns the rownames into an additional column
TopTable_Ex_diet <- rownames_to_column(TopTable_Ex_diet, "Entrez_ID" )
TopTable_C_diet <- rownames_to_column(TopTable_C_diet, "Entrez_ID")
subset_annot <- subset(annot, select = c(Entrez_Gene_ID, Symbol))
subset_annot <- unique(subset_annot)
TopTable_Ex_diet <- merge(TopTable_Ex_diet, subset_annot, by.x="Entrez_ID", by.y="Entrez_Gene_ID")
TopTable_C_diet <- merge(TopTable_C_diet, subset_annot, by.x="Entrez_ID", by.y="Entrez_Gene_ID")
write.table(TopTable_Ex_diet, file = "TopTable_Ex-diet.csv", sep=",", row.names=FALSE)
write.table(TopTable_C_diet, file = "TopTable_C-diet.csv", sep=",", row.names=FALSE)
library(rstudioapi)
library(org.Hs.eg.db)
if (!("BiocManager" %in% installed.packages())) { install.packages("BiocManager") }
if (!("rstudioapi" %in% installed.packages())) { BiocManager::install("rstudioapi") }
# if you get a non-zero exit status for org.Hs.eg.db - run the following line twice
if (!("org.Hs.eg.db" %in% installed.packages())) { BiocManager::install("org.Hs.eg.db") }
library(rstudioapi)
library(org.Hs.eg.db)
# if you get a non-zero exit status for org.Hs.eg.db - run the following line twice
if (!("org.Hs.eg.db" %in% installed.packages())) { BiocManager::install("org.Hs.eg.db") }
# Loading packages
library(rstudioapi)
library(org.Hs.eg.db)
library(dplyr)
library(EnhancedVolcano)
library(clusterProfiler)
library(readr)
library(RColorBrewer)
library(RCy3)
if (!("RCy3" %in% installed.packages())) { BiocManager::install("RCy3") }
library(RCy3)
